//def componentName = project.getName().startsWith("module_") ? project.getName().substring(0, "module_".length()) :

if (isBuildModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'com.jakewharton.butterknife'
android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.build_version_code
        versionName build_versions.build_version_name

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ moduleName : project.getName() ]
                includeCompileClasspath true
            }
        }
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled true
            if (isBuildModule.toBoolean()) {
                shrinkResources true
            }
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/release/AndroidManifest.xml'
            }
        }
    }
}

dependencies {
    if (isBuildModule.toBoolean()) {

        annotationProcessor(deps.butterknife.compiler) {
            exclude module: 'support-annotations'
        }
        //tools
        annotationProcessor deps.dagger.compiler
        annotationProcessor deps.arouter.compiler
        //test
//        debugImplementation rootProject.ext.dependencies["canary-debug"]
//        releaseImplementation rootProject.ext.dependencies["canary-release"]
//        testImplementation rootProject.ext.dependencies["canary-release"]
    } else {
        compileOnly deps.dagger.compiler
        compileOnly deps.arouter.compiler
        compileOnly deps.butterknife.compiler
//        compileOnly rootProject.ext.dependencies["canary-debug"]
//        compileOnly rootProject.ext.dependencies["canary-release"]
    }


}
